<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:ctlp="http://www.occamlab.com/te/parsers" xmlns:fn="http://www.w3.org/2005/02/xpath-functions" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:saxon="http://saxon.sf.net/" xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:wcs="http://schemas.opengis.net/wcs/1.1.1" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<ctl:function name="wcs:get-capabilities-accept-versions">
		<ctl:param name="url"/>
		<ctl:return>Returns the response from a WCS GetCapabilities request with the AcceptVersions parameter having a value of 1.1.1 </ctl:return>
		<ctl:code>
			<ctl:message>Inside wcs:get-capabilities-accept-versions</ctl:message>
			<ctl:message select="concat('URL is ', $url)"/>
			<ctl:request>
				<ctl:url>
					<xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$url"/>
				</ctl:url>
				<ctl:method>GET</ctl:method>
				<ctl:param name="service">WCS</ctl:param>
				<ctl:param name="request">GetCapabilities</ctl:param>
				<ctl:param name="acceptversions">1.1.1</ctl:param>
				<ctlp:XMLValidatingParser>
					<ctlp:schemas>
						<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
					</ctlp:schemas>
				</ctlp:XMLValidatingParser>
			</ctl:request>
		</ctl:code>
	</ctl:function>
	<ctl:function name="wcs:describe-coverage-multiple-identifiers">
		<ctl:param name="url"/>
		<ctl:param name="http-method"/>
		<ctl:param name="identifier1"/>
		<ctl:param name="identifier2"/>
		<ctl:param name="identifier3"/>
		<ctl:return>Returns the response from a WCS DescribeCoverage request with multiple coverage identifiers</ctl:return>
		<ctl:code>
			<ctl:message>Inside wcs:describe-coverage-multiple-identifiers</ctl:message>
			<ctl:message select="concat('URL is ', $url)"/>
			<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result2">
				<ctl:call-function name="wcs:get-capabilities-accept-versions">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-function>
			</xsl:variable>
			<ctl:request>
				<ctl:url>
					<xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$url"/>
				</ctl:url>
				<ctl:param name="service">WCS</ctl:param>
				<ctl:param name="request">DescribeCoverage</ctl:param>
				<ctl:param name="version">1.1.1</ctl:param>
				<ctl:param name="identifier">
					<xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="concat($identifier1, ',')"/>
					<xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="concat($identifier2, ',')"/>
					<xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$identifier3"/>
				</ctl:param>
				<ctlp:XMLValidatingParser>
					<ctlp:schemas>
						<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
					</ctlp:schemas>
				</ctlp:XMLValidatingParser>
			</ctl:request>
		</ctl:code>
	</ctl:function>
	<ctl:function name="wcs:describe-coverage-minimal-request">
		<ctl:param name="url"/>
		<ctl:param name="http-method"/>
		<ctl:return>Returns the response from a WCS DesribeCoverage minimal request.</ctl:return>
		<ctl:code/>
	</ctl:function>
	<ctl:function name="wcs:describe-coverage-response-interpolation-methods">
		<ctl:param name="url"/>
		<ctl:param name="http-method"/>
		<ctl:return>Returns the response from a WCS DescribeCoverage response with interpolation methods.</ctl:return>
		<ctl:code/>
	</ctl:function>
	<ctl:suite name="wcs:suite">
		<ctl:title>Executable Test Suite for Annex A - Abstract Test Suite for WCS 1.1.1</ctl:title>
		<ctl:starting-test>wcs:Main</ctl:starting-test>
	</ctl:suite>
	<ctl:test name="wcs:Main">
		<ctl:assertion>The Implementation Under Test (IUT) satisfies all applicable assertions.</ctl:assertion>
		<ctl:code>
			<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="form-values">
				<ctl:form>
					<h3>Web Coverage Service 1.1.1</h3>
					<p>This executable test suite tests the conformance of a WCS 1.1.1 server to the specification  OGC 07-067r2.</p>
					<blockquote>
						<table border="0" cellpadding="5">
							<tr>
								<td align="center">URL of WCS for http GET encoding of GetCapabilities</td>
								<td align="center">
									<input id="url" type="text" name="url" size="100" value="http://ogcdemo.pcigeomatics.com:8181/swe/wcs?"/>
								</td>
							</tr>
						</table>
						<table border="0" cellpadding="5">
							<tr>
								<td align="center">
									<input type="submit" value="Next"/>
								</td>
							</tr>
						</table>
					</blockquote>
				</ctl:form>
			</xsl:variable>
			<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url" select="$form-values/values/value[@key='url']"/>
			<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
				</ctl:request>
			</xsl:variable>
			<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
				<ctl:message select="concat('No response from URL: ', $url, '. Perhaps this is not the correct address. No tests will be performed.')"/>
				<ctl:fail/>
			</xsl:if>
			<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result) &gt; 0">
				<ctl:message select="concat('WCS 1.1.1 URL is ', $url, '.')"/>
				<ctl:call-test xmlns="" name="wcs:GetCapabilities-main">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
				<ctl:call-test xmlns="" name="wcs:DescribeCoverage-main">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
				<ctl:call-test xmlns="" name="wcs:GetCoverage-main">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:package>
		<ctl:test xmlns="" name="wcs:GetCapabilities-main">
			<ctl:param name="url"/>
			<ctl:assertion>All assertions for "GetCapabilities" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the GetCapabilities module.</ctl:comment>
			<ctl:link xmlns="" title="1. WCS-GetCapabilities">./ats.html#GetCapabilities</ctl:link>
			<ctl:code>
				<ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result1">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>GET</ctl:method>
						<ctl:param name="service">WCS</ctl:param>
						<ctl:param name="request">GetCapabilities</ctl:param>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$result1">
					<ctl:message select="concat('result1/Capabilities[@version]/@version: ', $result1/*[local-name()='Capabilities'][@version]/@version, '.')"/>
				</xsl:if>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="EqualUpdateSequenceValue">
					<xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-get">GET</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-xml">XML</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-soap">SOAP</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url-get">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url-xml">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="soap-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/ows:Post/ows:Constraint[@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="store-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='true'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier1">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][1]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier2">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][2]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier3">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][3]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<ctl:message xmlns="" select="concat('EqualUpdateSequenceValue: ', $EqualUpdateSequenceValue, '.')"/>
				<ctl:message xmlns="" select="concat('url-get: ', $url-get, '.')"/>
				<ctl:message xmlns="" select="concat('url-xml: ', $url-xml, '.')"/>
				<ctl:message xmlns="" select="concat('xml-supported: ', $xml-supported, '.')"/>
				<ctl:message xmlns="" select="concat('soap-supported: ', $soap-supported, '.')"/>
				<ctl:message xmlns="" select="concat('store-supported: ', $store-supported, '.')"/>
				<ctl:message xmlns="" select="concat('identifier1: ', $identifier1, '.')"/>
				<ctl:message xmlns="" select="concat('identifier2: ', $identifier2, '.')"/>
				<ctl:message xmlns="" select="concat('identifier3: ', $identifier3, '.')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="update-values">
					<xsl:if test="string-length($EqualUpdateSequenceValue) &gt; 0">
						<ctl:form>
							<h3>Update Sequence Values for WCS 1.1.1</h3>
							<p>This WCS service
				    <xsl:if test="string-length($EqualUpdateSequenceValue) &gt; 0">supports</xsl:if><xsl:if test="string-length($EqualUpdateSequenceValue) = 0">does NOT support</xsl:if>
				    updateSequence in GetCapabilities requests. Please enter values for the minimal value,
				          the maximal value and a bogus value for the updateSequence.</p>
							<blockquote>
								<table border="0" cellpadding="5">
									<tr>
										<td align="left">Minimal Value</td>
										<td align="left">
											<input type="text" name="MinimalValue" size="15" value="0"/>
										</td>
									</tr>
									<tr>
										<td align="left">Maximal Value</td>
										<td align="left">
											<input type="text" name="MaximalValue" size="15" value="1399999999999"/>
										</td>
									</tr>
									<tr>
										<td align="left">Bogus Value</td>
										<td align="left">
											<input type="text" name="BogusValue" size="15" value="bogus"/>
										</td>
									</tr>
								</table>
								<table border="0" cellpadding="5">
									<tr>
										<td align="center">
											<input type="submit" value="Submit"/>
										</td>
									</tr>
								</table>
							</blockquote>
						</ctl:form>
					</xsl:if>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="MinimalUpdateSequenceValue">
					<xsl:value-of select="$update-values/values/value[@key='MinimalValue']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="MaximalUpdateSequenceValue">
					<xsl:value-of select="$update-values/values/value[@key='MaximalValue']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="BogusUpdateSequenceValue">
					<xsl:value-of select="$update-values/values/value[@key='BogusValue']"/>
				</xsl:variable>
				<ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'MinimalRequest', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'MinimalRequest', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceIdentification', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceIdentification', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceProvider', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceProvider', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_OperationsMetadata', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_OperationsMetadata', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Contents', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Contents', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_All">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_All', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_All">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_All', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Two_Values', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Two_Values', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Multiple_Values', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Multiple_Values', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Bogus', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Bogus', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_1.1.1', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_1.1.1', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_0.0.0">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_0.0.0', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_0.0.0">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_0.0.0', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_99.99.99">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_99.99.99', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_99.99.99">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_99.99.99', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_Multiple', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_Multiple', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_No_Value', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_No_Value', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Equal_Value', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Equal_Value', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Bogus_Value', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Bogus_Value', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Lowest_Value', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Lowest_Value', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Highest_Value', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Highest_Value', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextXML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextXML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextBogus', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
						<ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
						<ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
						<ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextBogus', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceIdentification', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceIdentification', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceProvider', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceProvider', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Required_Attributes', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Required_Attributes', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Encoding', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Encoding', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Multiple_Connect_Points', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Multiple_Connect_Points', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Store_Parameter', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Store_Parameter', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedCRS', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedCRS', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedFormat', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedFormat', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Title', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Title', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Abstract', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Abstract', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', ' with POST XML skipped.')"/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with only mandatory
           parameters is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 1. GetCapabilities minimal request</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.2.2.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value ServiceIdentification is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 2. GetCapabilities Sections ServiceIdentification</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">ServiceIdentification</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>ServiceIdentification</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value ServiceProvider is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 3. GetCapabilities Sections ServiceProvider</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">ServiceProvider</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>ServiceProvider</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value OperationsMetadata is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 4. GetCapabilities Sections OperationsMetadata</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">OperationsMetadata</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>OperationsMetadata</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value Contents is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 5. GetCapabilities Sections Contents</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">Contents</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>Contents</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_All">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value All is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 6. GetCapabilities Sections All</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">All</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>All</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with two values is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 7. GetCapabilities Sections Two Values</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">ServiceIdentification,ServiceProvider</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>ServiceIdentification</Section>
                                  <Section>ServiceProvider</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with multiple values is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 8. GetCapabilities Sections Multiple Values</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">ServiceIdentification,ServiceProvider,OperationsMetadata,Contents</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>ServiceIdentification</Section>
                                  <Section>ServiceProvider</Section>
                                  <Section>OperationsMetadata</Section>
                                  <Section>Contents</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value Bogus is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 9. GetCapabilities Sections Bogus</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.4.1 Table 8.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections">Bogus</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <Sections>
                                  <Section>Bogus</Section>                              
                                </Sections>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with value 1.1.1 is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 10. GetCapabilities AcceptVersions 1.1.1</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.2.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptversions">1.1.1</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <AcceptVersions>
                                  <Version>1.1.1</Version>                              
                                </AcceptVersions>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_0.0.0">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions 
           parameter with the version number 'too low' is submitted, the response
           is valid XML that validates against the OWS Common 1.1.0 
           ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 11. GetCapabilities AcceptVersions 0.0.0</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4, 7.3.2 and 7.3.1.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptversions">0.0.0</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <AcceptVersions>
                                  <Version>0.0.0</Version>                              
                                </AcceptVersions>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_99.99.99">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with the version number 'too high' is submitted, the response
           is valid XML that validates against the OWS Common 1.1.0
           ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 12. GetCapabilities AcceptVersions 99.99.99</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4, 7.3.2 and 7.3.1.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptversions">99.99.99</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <AcceptVersions>
                                  <Version>99.99.99</Version>                              
                                </AcceptVersions>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with multiple values is submitted, the response is valid XML
            that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 13. GetCapabilities AcceptVersions Multiple Values</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.2.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptversions">0.0.0,1.1.1</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <AcceptVersions>
                                  <Version>0.0.0</Version>
                                  <Version>1.1.1</Version>                              
                                </AcceptVersions>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an UpdateSequence
           parameter with no value is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 14. GetCapabilities UpdateSequence No Value</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updateSequence"/>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" updateSequence ="">
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           of EqualUpdateSequenceValue is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 15. GetCapabilities UpdateSequence Equal Value</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<ctl:message select="concat('EqualUpdateSequenceValue is |', $EqualUpdateSequenceValue, '|')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updateSequence">
								<xsl:value-of select="$EqualUpdateSequenceValue"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" updateSequence ="1200437185312">
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)!=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to a bogus value is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema. The bogus value
           is one that is not a valid value in the server's updateSequence set
           of values. The value is supplied by the user.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 16. GetCapabilities UpdateSequence Bogus Value</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<ctl:message select="concat('BogusUpdateSequenceValue is |', $BogusUpdateSequenceValue, '|')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updateSequence">
								<xsl:value-of select="$BogusUpdateSequenceValue"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" updateSequence ="bogus">
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to the lowest possible value of the server's updateSequence set
           of values is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema. The value is
           supplied by the user.</ctl:assertion>
			<ctl:comment xmlns="">Table 17. GetCapabilities UpdateSequence Lowest Value</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<ctl:message select="concat('MinimalUpdateSequenceValue is |', $MinimalUpdateSequenceValue, '|')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updateSequence">
								<xsl:value-of select="$MinimalUpdateSequenceValue"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" updateSequence ="0">
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to the highest possible value of the server's updateSequence
           set of values is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema. The value is
           supplied by the user.</ctl:assertion>
			<ctl:comment xmlns="">Table 18. GetCapabilities UpdateSequence Highest Value</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<ctl:message select="concat('MaximalUpdateSequenceValue is |', $MaximalUpdateSequenceValue, '|')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updateSequence">
								<xsl:value-of select="$MaximalUpdateSequenceValue"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" updateSequence ="1299999999999">
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptFormats
           parameter with a value of MIME type text/xml is submitted, the response
           is valid XML that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 19. GetCapabilities AcceptFormats Text/XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.5.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptformats">text/xml</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <AcceptFormats>
                                  <OutputFormat>text/xml</OutputFormat>                              
                                </AcceptFormats>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="EqualUpdateSequenceValue"/>
			<ctl:param name="BogusUpdateSequenceValue"/>
			<ctl:param name="MinimalUpdateSequenceValue"/>
			<ctl:param name="MaximalUpdateSequenceValue"/>
			<ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptFormats
           parameter wiith a value of MIME type text/bogus is submitted, the
           response is valid XML that validates against the WCS 1.1.1
           GetCapabilities schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 20. GetCapabilities AcceptFormats Text/Bogus</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.5.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptformats">text/bogus</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                                <AcceptFormats>
                                  <OutputFormat>text/bogus</OutputFormat>                              
                                </AcceptFormats>
                              </GetCapabilities>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains a ServiceIdentification section that validates
          against the OWS Common 1.1.0 ServiceIdentification schema.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 21. GetCapabilities Response ServiceIdentification</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.4 and 7.4.9.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains a ServiceProvider section that validates
          against the OWS Common 1.1.0 ServiceProvider schema.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 22. GetCapabilities Response ServiceProvider</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.5 and 7.4.9.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section that validates
          against the OWS Common 1.1.0 OperationsMetadata schema.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 23. GetCapabilities Response OperationsMetadata</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.1 and 8.3.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.6, 7.4.7 and 7.4.9.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section that has the three
          mandatory values of the XML attributes.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 24. GetCapabilities Response OperationsMetadata Required Attributes</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.4.7.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          for DCP HTTP Post transfers, the PostEncoding constraint is specified. 
          </ctl:assertion>
			<ctl:comment xmlns="">Table 25. GetCapabilities Response OperationsMetadata Post Encoding</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          for DCP HTTP Post transfers, that multiple encoding constraints with multiple connect point URLs is valid. 
          </ctl:assertion>
			<ctl:comment xmlns="">Table 26. GetCapabilities Response OperationsMetadata Post Multiple Connect Points</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that indicates whether the store parameter is implemented in GetCoverage requests.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 27. GetCapabilities Response OperationsMetadata Store Parameter</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.3.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 28. GetCapabilities Response OperationsMetadata Contents</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section with a CoverageSummary.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 29. GetCapabilities Response OperationsMetadata Contents CoverageSummary</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.1 and 8.3.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section with SupportedCRS that is a union of the nested CoverageSummaries.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 30. GetCapabilities Response OperationsMetadata Contents SupportedCRS</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section with SupportedFormat that is a union of the nested CoverageSummaries.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 31. GetCapabilities Response OperationsMetadata Contents SupportedFormat</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each one has a title.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 32. GetCapabilities Response OperationsMetadata Contents CoverageSummary Title</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.6.1 Figure 12.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each one has an abstract.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 33. GetCapabilities Response OperationsMetadata Contents CoverageSummary Abstract</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.6.1 Figure 12.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each one has at least one supportedFormat listed or inherited.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 34. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedFormat</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each one has at least one supportedCRS listed or inherited.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 35. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedCRS</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each one has either an identifier or a subsidiary CoverageSummary.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 36. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each identifier must conform to XML syntax.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 37. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.3 and 7.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each SupportedFormat must conform to XML syntax.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 38. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedFormat XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.3 and 7.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that the service metadata document is valid XML that contains an OperationsMetadata section
          that contains a Contents section. If there are CoverageSummaries then each identifier must be unique for this server.
          </ctl:assertion>
			<ctl:comment xmlns="">Table 39. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier Unique</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="get-result">
					<ctl:message>Calling wcs:get-capabilities-accept-versions</ctl:message>
					<ctl:call-function name="wcs:get-capabilities-accept-versions">
						<ctl:with-param name="url" select="$url"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
	</ctl:package>
	<ctl:package>
		<ctl:test xmlns="" name="wcs:DescribeCoverage-main">
			<ctl:param name="url"/>
			<ctl:assertion>All assertions for "DescribeCoverage" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the DescribeCoverage module.</ctl:comment>
			<ctl:link xmlns="" title="2. WCS-DescribeCoverage">./ats.html#DescribeCoverage</ctl:link>
			<ctl:code>
				<ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result1">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>GET</ctl:method>
						<ctl:param name="service">WCS</ctl:param>
						<ctl:param name="request">GetCapabilities</ctl:param>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$result1">
					<ctl:message select="concat('result1/Capabilities[@version]/@version: ', $result1/*[local-name()='Capabilities'][@version]/@version, '.')"/>
				</xsl:if>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="EqualUpdateSequenceValue">
					<xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-get">GET</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-xml">XML</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-soap">SOAP</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url-get">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url-xml">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="soap-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/ows:Post/ows:Constraint[@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="store-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='true'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier1">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][1]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier2">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][2]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier3">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][3]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<ctl:message xmlns="" select="concat('EqualUpdateSequenceValue: ', $EqualUpdateSequenceValue, '.')"/>
				<ctl:message xmlns="" select="concat('url-get: ', $url-get, '.')"/>
				<ctl:message xmlns="" select="concat('url-xml: ', $url-xml, '.')"/>
				<ctl:message xmlns="" select="concat('xml-supported: ', $xml-supported, '.')"/>
				<ctl:message xmlns="" select="concat('soap-supported: ', $soap-supported, '.')"/>
				<ctl:message xmlns="" select="concat('store-supported: ', $store-supported, '.')"/>
				<ctl:message xmlns="" select="concat('identifier1: ', $identifier1, '.')"/>
				<ctl:message xmlns="" select="concat('identifier2: ', $identifier2, '.')"/>
				<ctl:message xmlns="" select="concat('identifier3: ', $identifier3, '.')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="MinimalUpdateSequenceValue">0</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="MaximalUpdateSequenceValue">0</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="BogusUpdateSequenceValue">0</xsl:variable>
				<ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MinimalRequest">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MinimalRequest', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MinimalRequest">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MinimalRequest', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingVersion">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingVersion', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingVersion">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingVersion', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingIdentifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingIdentifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingIdentifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingIdentifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MultipleIdentifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MultipleIdentifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_MultipleIdentifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MultipleIdentifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_EmptyIdentifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'EmptyIdentifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_EmptyIdentifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'EmptyIdentifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_BogusIdentifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'BogusIdentifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_BogusIdentifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'BogusIdentifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_ValidWithBogusIdentifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'ValidWithBogusIdentifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_ValidWithBogusIdentifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'ValidWithBogusIdentifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethods">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethods', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethods">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethods', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_Identifier_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_Identifier_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_Identifier_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_Identifier_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_SupportedFormat_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_SupportedFormat_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_SupportedFormat_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_SupportedFormat_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_FieldIdentifier_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_FieldIdentifier_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_FieldIdentifier_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_FieldIdentifier_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethod_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethod_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethod_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethod_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisIdentifier_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisIdentifier_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisIdentifier_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisIdentifier_XML', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisKey_XML">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisKey_XML', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisKey_XML">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisKey_XML', ' with POST XML skipped.')"/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_MinimalRequest">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with only mandatory parameters is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 40. DescribeCoverage Minimal Request</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 9.2.1">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="version">1.1.1</ctl:param>
							<ctl:param name="identifiers">
								<xsl:value-of select="$identifier1"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" version ="1.1.1">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_MissingVersion">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a missing version parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 41. DescribeCoverage Missing Version</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="identifiers">
								<xsl:value-of select="$identifier1"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_MissingIdentifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a missing identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 42. DescribeCoverage Missing Identifer</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="version">1.1.1</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" version ="1.1.1">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_MultipleIdentifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with multiple identifier parameters is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 43. DescribeCoverage Multiple Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 9.2.1">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="version">1.1.1</ctl:param>
							<ctl:param name="identifiers">
								<xsl:value-of select="$identifier1,$identifier2,$identifier3"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" version ="1.1.1">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_EmptyIdentifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with an empty identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 44. DescribeCoverage Empty Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="version">1.1.1</ctl:param>
							<ctl:param name="identifiers"/>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" version ="1.1.1">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_BogusIdentifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a bogus identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 45. DescribeCoverage Bogus Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="version">1.1.1</ctl:param>
							<ctl:param name="identifiers">Bogus</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" version ="1.1.1">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_ValidWithBogusIdentifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a valid identifier and a bogus identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 46. DescribeCoverage Bogus With Valid Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>
							<xsl:choose>
								<xsl:when test="$http-method = 'GET'">GET</xsl:when>
								<xsl:otherwise>POST</xsl:otherwise>
							</xsl:choose>
						</ctl:method>
						<xsl:if test="$http-method = 'GET'">
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="version">1.1.1</ctl:param>
							<ctl:param name="identifiers">
								<xsl:value-of select="$identifier1"/>
							</ctl:param>
						</xsl:if>
						<xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
							<ctl:body>
                              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" service = "WCS" version ="1.1.1">
                              </DescribeCoverage>
                            </ctl:body>
						</xsl:if>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<ctl:message select="concat('length of result is ', string-length($result))"/>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($result)=0">
					<ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethods">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The methods listed
          in the InterpolationMethods must be entries in the InterpolationMethods dictionary.</ctl:assertion>
			<ctl:comment xmlns="">Table 47. DescribeCoverage Response InterpolationMethods</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.1.3 Table 17 and H.3.1">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_Identifier_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The identifier in
          the CoverageDescription must be usable literally as-is.</ctl:assertion>
			<ctl:comment xmlns="">Table 48. DescribeCoverage Response Identifier XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 a) and 7.4">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_SupportedFormat_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The supportedFormat in
          the CoverageDescription must be usable literally as-is.</ctl:assertion>
			<ctl:comment xmlns="">Table 49. DescribeCoverage Response SupportedFormat XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 b) and 7.4">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_FieldIdentifier_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The identifier in the Field section
          of the Range section in the CoverageDescription must be usable literally as-is.</ctl:assertion>
			<ctl:comment xmlns="">Table 50. DescribeCoverage Response FieldIdentifier XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 c) and 7.4">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethod_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The interpolationMethod in the 
          InterpolationMethods section of the Field section
          of the Range section in the CoverageDescription must be usable literally as-is.</ctl:assertion>
			<ctl:comment xmlns="">Table 51. DescribeCoverage Response InterpolationMethod XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 d) and 7.4">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_AxisIdentifier_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The identifier in the Axis section
          of the Range section in the CoverageDescription must be usable literally as-is.</ctl:assertion>
			<ctl:comment xmlns="">Table 52. DescribeCoverage Response AxisIdentifier XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 e) and 7.4">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:DescribeCoverage_Response_AxisKey_XML">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:param name="identifier1"/>
			<ctl:param name="identifier2"/>
			<ctl:param name="identifier3"/>
			<ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers is submitted, the response
          is valid XML that validates against the WCS 1.1.1 DescribeCoverage schema. The key in the Axis section
          of the Range section in the CoverageDescription must be usable literally as-is.</ctl:assertion>
			<ctl:comment xmlns="">Table 53. DescribeCoverage Response AxisKey XML</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 f) and 7.4">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-result">
					<ctl:message>Calling wcs:describe-coverage-multiple-identifiers</ctl:message>
					<ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
	</ctl:package>
	<ctl:package>
		<ctl:test xmlns="" name="wcs:GetCoverage-main">
			<ctl:param name="url"/>
			<ctl:assertion>All assertions for "GetCoverage" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the GetCoverage module.</ctl:comment>
			<ctl:link xmlns="" title="3. WCS-GetCoverage">./ats.html#GetCoverage</ctl:link>
			<ctl:code>
				<ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="result1">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>GET</ctl:method>
						<ctl:param name="service">WCS</ctl:param>
						<ctl:param name="request">GetCapabilities</ctl:param>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="file">./resources/xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$result1">
					<ctl:message select="concat('result1/Capabilities[@version]/@version: ', $result1/*[local-name()='Capabilities'][@version]/@version, '.')"/>
				</xsl:if>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="EqualUpdateSequenceValue">
					<xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-get">GET</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-xml">XML</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="http-soap">SOAP</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url-get">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="url-xml">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="xml-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="soap-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/ows:Post/ows:Constraint[@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="store-supported">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='true'"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier1">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][1]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier2">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][2]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="identifier3">
					<xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][3]/*[local-name()='Identifier']"/>
				</xsl:variable>
				<ctl:message xmlns="" select="concat('EqualUpdateSequenceValue: ', $EqualUpdateSequenceValue, '.')"/>
				<ctl:message xmlns="" select="concat('url-get: ', $url-get, '.')"/>
				<ctl:message xmlns="" select="concat('url-xml: ', $url-xml, '.')"/>
				<ctl:message xmlns="" select="concat('xml-supported: ', $xml-supported, '.')"/>
				<ctl:message xmlns="" select="concat('soap-supported: ', $soap-supported, '.')"/>
				<ctl:message xmlns="" select="concat('store-supported: ', $store-supported, '.')"/>
				<ctl:message xmlns="" select="concat('identifier1: ', $identifier1, '.')"/>
				<ctl:message xmlns="" select="concat('identifier2: ', $identifier2, '.')"/>
				<ctl:message xmlns="" select="concat('identifier3: ', $identifier3, '.')"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="MinimalUpdateSequenceValue">0</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="MaximalUpdateSequenceValue">0</xsl:variable>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="BogusUpdateSequenceValue">0</xsl:variable>
				<ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_MinimalRequest">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MinimalRequest', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_MinimalRequest">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MinimalRequest', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingIdentifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingIdentifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'EmptyIdentifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'EmptyIdentifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BogusIdentifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BogusIdentifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingBoundingBox', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingBoundingBox', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'SurroundingBoundingBox', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'SurroundingBoundingBox', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'InsideBoundingBox', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'InsideBoundingBox', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OverlappingBoundingBox', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OverlappingBoundingBox', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BoundingBox_OutOfRangeCoordinates', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BoundingBox_OutOfRangeCoordinates', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OutsideBoundingBox', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OutsideBoundingBox', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'AntimeridianBoundingBox', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'AntimeridianBoundingBox', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Early', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Early', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Late', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Late', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution_And_Frame', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution_And_Frame', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_BeginTime_Only', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_BeginTime_Only', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_EndTime_Only', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_EndTime_Only', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Identifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Identifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Multiple_Identifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Multiple_Identifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Repeated_Identifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Repeated_Identifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Bogus_Identifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Bogus_Identifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Valid_With_Bogus_Identifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Valid_With_Bogus_Identifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Missing', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Missing', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Bogus', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Bogus', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_One_Key', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_One_Key', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Some_Keys', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Some_Keys', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_All_Keys', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_All_Keys', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_No_Key', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_No_Key', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Bogus_Key', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Bogus_Key', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Formats">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Formats', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Formats">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Formats', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Bogus_Format">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Bogus_Format', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Bogus_Format">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Bogus_Format', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Empty_Format">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Empty_Format', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Empty_Format">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Empty_Format', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Missing_Format">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Missing_Format', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Missing_Format">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Missing_Format', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Store_True">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_True', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Store_True">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_True', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Store_False">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_False', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Store_False">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_False', ' with POST XML skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$url-get">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Store_Bogus">
						<ctl:with-param name="url" select="$url-get"/>
						<ctl:with-param name="http-method" select="$http-get"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="not($url-get)">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_Bogus', ' with GET skipped.')"/>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'true'">
					<ctl:call-test xmlns="" name="wcs:GetCoverage_Store_Bogus">
						<ctl:with-param name="url" select="$url-xml"/>
						<ctl:with-param name="http-method" select="$http-xml"/>
						<ctl:with-param name="identifier1" select="$identifier1"/>
						<ctl:with-param name="identifier2" select="$identifier2"/>
						<ctl:with-param name="identifier3" select="$identifier3"/>
					</ctl:call-test>
				</xsl:if>
				<xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$xml-supported = 'false'">
					<ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_Bogus', ' with POST XML skipped.')"/>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_MinimalRequest">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with only mandatory parameters is submitted, the response
          is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 54. GetCoverage Minimal Request</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 10.2.1.1 Tables 21, 22 and 23.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 55. GetCoverage Missing Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22  and 23 and 10.3.2 Table 28.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an empty identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 56. GetCoverage Empty Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus identifier parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 57. GetCoverage Bogus Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing BoundingBox parameter is submitted, the response
          is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
			<ctl:comment xmlns="">Table 58. GetCoverage Missing BoundingBox</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter which totally surrounds the
          CoverageDescription BoundingBox is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 59. GetCoverage Surrounding BoundingBox</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter which is totally inside
          the CoverageDescription BoundingBox is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 60. GetCoverage Inside BoundingBox</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter which overlaps
          the CoverageDescription BoundingBox is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 61. GetCoverage Overlapping BoundingBox</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter with coordinate
          values which are out of range is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 62. GetCoverage BoundingBox Out Of Range Coordinates</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter which is totally outside
          and not overlapping the CoverageDescription BoundingBox is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 63. GetCoverage Outside BoundingBox</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter with coordinate
          values which span the antimeridian is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 64. GetCoverage Antimeridian BoundingBox</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6.2, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">./ats.html#OGC-06-121r3</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePosition parameter from the CoverageDescription
            is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 65. GetCoverage TemporalSubset TimePosition</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an early TimePosition parameter
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 66. GetCoverage TemporalSubset TimePosition Early</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a late TimePosition parameter
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 67. GetCoverage TemporalSubset TimePosition Late</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                       Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with TimePeriod BeginTime and EndTime parameters
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 68. GetCoverage TemporalSubset TimePeriod</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod with resolution
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 69. GetCoverage TemporalSubset TimePeriod With Resolution</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                    Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod with resolution and frame
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 70. GetCoverage TemporalSubset TimePeriod With Resolution And Frame</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                    Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod but just a BeginTime
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 71. GetCoverage TemporalSubset TimePeriod BeginTime Only</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; 9.3.2.4; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod but just an EndTime
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 72. GetCoverage TemporalSubset TimePeriod EndTime Only</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; 9.3.2.4; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a RangeSubset Identifier
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 73. GetCoverage RangeSubset Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; and 9.3.1.3 Tables 16 and 17.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with RangeSubset Identifiers
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 74. GetCoverage RangeSubset Multiple Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; and 9.3.1.3 Tables 16 and 17.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a repeated RangeSubset Identifier
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 75. GetCoverage RangeSubset Repeated Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus RangeSubset Identifier
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 76. GetCoverage RangeSubset Bogus Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with one valid RangeSubset Identifier and one bogus Identifier
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 77. GetCoverage RangeSubset Valid With Bogus Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an InterpolationMethod
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 78. GetCoverage RangeSubset InterpolationMethod</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-interp-result">
					<ctl:call-function name="wcs:describe-coverage-response-interpolation-methods">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing InterpolationMethod
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 79. GetCoverage RangeSubset InterpolationMethod Missing</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1; 10.3.2">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-interp-result">
					<ctl:call-function name="wcs:describe-coverage-response-interpolation-methods">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus InterpolationMethod
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 80. GetCoverage RangeSubset InterpolationMethod Bogus</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1; 10.3.2">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-interp-result">
					<ctl:call-function name="wcs:describe-coverage-response-interpolation-methods">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and one Axis Key
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 81. GetCoverage RangeSubset Axis Identifier One Key</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and some Axis Keys
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 82. GetCoverage RangeSubset Axis Identifier Some Keys</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and all its Axis Keys
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 83. GetCoverage RangeSubset Axis Identifier All Keys</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifierand no Axis Key
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 84. GetCoverage RangeSubset Axis Identifier No Key</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 9.3.1.3 Tables 16, 17, 18 and 19; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and a bogus Axis Key
           is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 85. GetCoverage RangeSubset Axis Identifier Bogus Key</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a colon between Field Identifiers
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 86. GetCoverage RangeSubset KVP Syntax Colon Between Field Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a comma between Field Identifiers
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 87. GetCoverage RangeSubset KVP Syntax Comma Between Field Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon between Field Identifier And InterpolationMethod
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 88. GetCoverage RangeSubset KVP Syntax Semicolon Between Field Identifier And InterpolationMethod</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon between Axis Identifiers
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 89. GetCoverage RangeSubset KVP Syntax Semicolon Between Axis Identifiers</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon between Axis Keys
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 90. GetCoverage RangeSubset KVP Syntax Semicolon Between Axis Keys</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing opening square bracket before the axis identifier
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 91. GetCoverage RangeSubset KVP Syntax Missing  Opening Square Bracket Before Axis Identifier</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing opening square bracket before the axis key
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 92. GetCoverage RangeSubset KVP Syntax Missing  Opening Square Bracket Before Axis Key</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing closing square bracket
           is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 93. GetCoverage RangeSubset KVP Syntax Missing Closing Square Bracket</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Formats">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a format
          is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 94. GetCoverage Formats</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 10.2.1.1 Tables 21, 22 and 23.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Bogus_Format">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus format
          is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 95. GetCoverage Bogus Format</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Empty_Format">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with an empty string for the format
          is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 96. GetCoverage Empty Format</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Missing_Format">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with the format missing
          is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 97. GetCoverage Missing Format</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Store_True">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter set to true
          is submitted, the response is an exception or not depending on the capabilities.</ctl:assertion>
			<ctl:comment xmlns="">Table 98. GetCoverage Store True</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.2.1.3; 8.3.2.3.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Store_False">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter set to false
          is submitted, the response is not an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 99. GetCoverage Store False</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; and 10.2.1.3.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
		<ctl:test xmlns="" name="wcs:GetCoverage_Store_Bogus">
			<ctl:param name="url"/>
			<ctl:param name="http-method"/>
			<ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter set to a bogus value
          is submitted, the response is an exception.</ctl:assertion>
			<ctl:comment xmlns="">Table 100. GetCoverage Store Bogus</ctl:comment>
			<ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; and 10.2.1.3.">./ats.html#OGC-07-067r2</ctl:link>
			<ctl:code>
				<ctl:message select="concat('URL is ', $url)"/>
				<ctl:message select="concat('http-method is ', $http-method)"/>
				<xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="describe-min-result">
					<ctl:call-function name="wcs:describe-coverage-minimal-request">
						<ctl:with-param name="url" select="$url"/>
						<ctl:with-param name="http-method" select="$http-method"/>
					</ctl:call-function>
				</xsl:variable>
			</ctl:code>
		</ctl:test>
	</ctl:package>
</ctl:package>